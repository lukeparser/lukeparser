name: Build & Deploy

on:
  push:
    branches:
      - master

jobs:

  auto-tag:
    name: Add release tag
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.autotag.outputs.tagsha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Autoadd release Tags
        uses: jaliborc/action-general-autotag@1.0.1
        id: autotag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source_file: "src/luke/__init__.py"
          # this is the semver regex https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          # with an capture group (around everything), but all other groups are non capturing
          # double escape's where necessary
          extraction_regex: "__version__\\s*=\\s*[\\'\"]((?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)(?:-(?:(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?:[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)[\\'\"]"
          tag_message: "Alpha Release"
          tag_format: "v{version}"
      - name: Show version
        if: steps.autotag.outputs.tagsha
        run: echo ${{ steps.autotag.outputs.tagsha }}

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [auto-tag, build-manylinux, build-macos, build-windows]
    if: ${{ needs.auto-tag.outputs.sha }}
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v2
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}

  build-src:
    name: sdist
    runs-on: ubuntu-latest
    needs: [auto-tag]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Switch to using Python 3.x by default
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip cython
        pip install -r requirements.txt
    - name: Build sdist
      run: python setup.py sdist
    - name: List builds
      run: ls -la ./dist/
    - name: Publish to PyPI
      if: ${{ needs.auto-tag.outputs.sha }}
      uses: pypa/gh-action-pypi-publish@master
      with:
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}

  build-manylinux:
    name: ${{ matrix.platform }} (all versions)
    runs-on: ubuntu-latest
    needs: [build-src]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - manylinux2010_x86_64
          - manylinux2014_x86_64
          - manylinux2014_aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        if: matrix.platform == 'manylinux2014_aarch64'
        uses: docker/setup-qemu-action@v1
      - name: Build wheel for manylinux2010_x86_64
        if: matrix.platform == 'manylinux2010_x86_64'
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
          build-requirements: 'pybison>=0.2.8 six>=1.10.0 watchdog tqdm tornado livereload cython'
          system-packages: 'atlas-devel flex'
          pre-build-command: 'sh .github/workflows/pre-build-script-manylinux.sh'
      - name: Build wheel for manylinux2014_x86_64
        if: matrix.platform == 'manylinux2014_x86_64'
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2014_x86_64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
          build-requirements: 'pybison>=0.2.8 six>=1.10.0 watchdog tqdm tornado livereload cython'
          system-packages: 'atlas-devel flex'
          pre-build-command: 'sh .github/workflows/pre-build-script-manylinux.sh'
      - name: Build wheel for manylinux2014_aarch64
        if: matrix.platform == 'manylinux2014_aarch64'
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2014_aarch64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39'
          build-requirements: 'pybison>=0.2.8 six>=1.10.0 watchdog tqdm tornado livereload cython'
          system-packages: 'atlas-devel flex'
          pre-build-command: 'sh .github/workflows/pre-build-script-manylinux.sh'
      - name: List builds
        run: ls -la ./dist/
      - name: Store ${{ matrix.platform }} wheel
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist/*manylinux*.whl

  build-macos:
    name: macOS (py${{ matrix.python-version }})
    runs-on: macos-latest
    needs: [build-src]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version:  ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install wheel setuptools
          # install newer bison
          cd /tmp
          curl -o bison.tar.gz http://ftp.gnu.org/gnu/bison/bison-3.4.tar.gz
          tar -xzf bison.tar.gz
          cd bison-3.4 && ./configure --prefix=/usr/local/opt/bison && make install
          brew install flex
          PATH="/usr/local/opt/bison/bin:/usr/local/opt/flex/bin:$PATH" bison --version
      - name: Build wheel for ${{ matrix.python-version }} on macOS
        run: |
            PATH="/usr/local/opt/bison/bin:/usr/local/opt/flex/bin:$PATH" python setup.py bdist_wheel
      - name: List builds
        run: ls -la ./dist/
      - name: Store macOS (py${{ matrix.python-version }}) wheel
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist

  build-windows:
    name: Windows (py${{ matrix.python-version }})
    runs-on: windows-latest
    needs: [build-src]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version:  ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install wheel setuptools
          choco install mingw
          choco install winflexbison3 --version=2.5.18.20190508
          win_bison --version
      - name: Build wheel for ${{ matrix.python-version }} on Windows
        run: python setup.py bdist_wheel
      - name: List builds
        run: dir dist
      - name: Store Windows (py${{ matrix.python-version }}) wheel
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: dist
